pipeline {
//def workspace = pwd()
    environment {
        role_path = "./roles/"
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_ROLE_ARN = credentials('AWS_ROLE_ARN')
    }
agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: terraform
            image: hashicorp/terraform:1.5
            command:
            - bin/cat
            tty: true
            resources:
              requests:
                memory: "556Mi"
                cpu: "400m"
            env:
            - name: AWS_ACCESS_KEY_ID
              value: $env.hashicorp/terraform
            - name: AWS_SECRET_ACCESS_KEY
              value: $env.AWS_SECRET_ACCESS_KEY
        '''
    }
  }

    parameters {
        choice(description: 'Select Terraform resource', name: 'TERRAFORM_RESOURCE', choices: ['s3', 'role', 'iam'])
        choice(description: 'Select action', name: 'ACTION', choices: ['plan', 'apply', 'destroy'])
    }

    stages {

        stage('checkout'){
          steps{
             checkout scmGit(branches: [[name: 'terraform-choice']], extensions: [], 
                             userRemoteConfigs: [[credentialsId: 'github-token', url: 'https://github.com/sanjeevk021995/Terraform.git']])
          }
        }
        stage('Terraform') {
            steps {
                 container('terraform') {
                script {
                    def selectedResources = params.TERRAFORM_RESOURCE.split(',')

                    // Loop through selected resources and perform the desired action
                    for (resource in selectedResources) {
                        echo "Processing resource: ${resource}"

                        // Set the directory path based on the resource
                        def directory = getResourceDirectory(resource)

                        // Run the Terraform command based on the selected action
                        switch (params.ACTION) {
                            case 'plan':
                                terraformPlan(directory)
                                break
                            case 'apply':
                                terraformApply(directory)
                                break
                            case 'destroy':
                                terraformDestroy(directory)
                                break
                            default:
                                terraformPlan(directory)
                            }
                        def getResourceDirectory(resource) {
                         // Define the directory path for each resource
                            switch (resource) {
                                 case 's3':
                                    return '${WORKSPACE}'
                                    break;
                                 case 'role':
                                    return '${workspace}/roles/'
                                    break;
                                 case 'iam':
                                    return '${workspace}/IAM/'
    }
}
                        }
                    }
                }
            }
        }
    }
}



def terraformPlan(directory) {
    // Run 'terraform plan' command in the specified directory
    sh 'pwd && ls && cd ${directory} && pwd && ls && terraform init  && terraform plan -var "AWS_ROLE_ARN=$AWS_ROLE_ARN"'
}

def terraformApply(directory) {
    // Run 'terraform apply' command in the specified directory
    sh 'pwd && ls && cd ${directory} && pwd && ls && terraform init && terraform apply -auto-approve -var "AWS_ROLE_ARN=$AWS_ROLE_ARN"'
}

def terraformDestroy(directory) {
    // Run 'terraform destroy' command in the specified directory
    sh 'pwd && ls && cd ${directory} && pwd && ls && terraform init && terraform destroy -auto-approve -var "AWS_ROLE_ARN=$AWS_ROLE_ARN"'
}
